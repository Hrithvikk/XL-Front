{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport class RegistrationComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    this.registrationForm = this.formBuilder.group({\n      userName: ['', [Validators.required]],\n      mobile: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n  addRegister() {\n    if (this.registrationForm.invalid) {\n      this.markFormGroupTouched(this.registrationForm);\n      return;\n    }\n    if (this.registrationForm.valid) {\n      let obj = {\n        userName: this.registrationForm.value.userName,\n        mobile: this.registrationForm.value.mobile,\n        password: this.registrationForm.value.password\n      };\n      this.http.post('http://localhost:8443/api/register/createUser', obj).subscribe(res => {\n        console.log('result', res);\n      });\n    }\n  }\n  markFormGroupTouched(registrationForm) {\n    throw new Error('Method not implemented.');\n  }\n}\nRegistrationComponent.ɵfac = function RegistrationComponent_Factory(t) {\n  return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nRegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegistrationComponent,\n  selectors: [[\"app-registration\"]],\n  decls: 9,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"placeholder\", \"Email/userName\", \"formControlName\", \"email\"], [\"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function RegistrationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegistrationComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.addRegister();\n      });\n      i0.ɵɵelement(1, \"input\", 1)(2, \"br\")(3, \"br\")(4, \"input\", 2)(5, \"br\")(6, \"br\");\n      i0.ɵɵelementStart(7, \"button\", 3);\n      i0.ɵɵtext(8, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.registrationForm);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;EAAgB;EACzEC,QAAQ;IACN,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MAC7CC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MACrCC,MAAM,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,CAAC,CAAC;MACnCE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACS,QAAQ,CAAC;KACrC,CAAC;EACJ;EACAG,WAAW;IACT,IAAI,IAAI,CAACN,gBAAgB,CAACO,OAAO,EAAE;MACjC,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACR,gBAAgB,CAAC;MAChD;;IAEF,IAAI,IAAI,CAACA,gBAAgB,CAACS,KAAK,EAAE;MAC/B,IAAIC,GAAG,GAAG;QACRR,QAAQ,EAAE,IAAI,CAACF,gBAAgB,CAACW,KAAK,CAACT,QAAQ;QAC9CE,MAAM,EAAE,IAAI,CAACJ,gBAAgB,CAACW,KAAK,CAACP,MAAM;QAC1CC,QAAQ,EAAE,IAAI,CAACL,gBAAgB,CAACW,KAAK,CAACN;OACvC;MAED,IAAI,CAACR,IAAI,CACNe,IAAI,CAAC,+CAA+C,EAAEF,GAAG,CAAC,CAC1DG,SAAS,CAAEC,GAAQ,IAAI;QACtBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,GAAG,CAAC;MAC5B,CAAC,CAAC;;EAER;EACAN,oBAAoB,CAACR,gBAAgC;IACnD,MAAM,IAAIiB,KAAK,CAAC,yBAAyB,CAAC;EAC5C;;AAhCWtB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAuB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCTlCC,+BAAgE;MAA3BA;QAAA,OAAYC,iBAAa;MAAA,EAAC;MAC7DD,2BAA0E;MAQ1EA,iCAA8C;MAAAA,sBAAM;MAAAA,iBAAS;;;MATzDA,gDAA8B","names":["Validators","RegistrationComponent","constructor","http","formBuilder","ngOnInit","registrationForm","group","userName","required","mobile","password","addRegister","invalid","markFormGroupTouched","valid","obj","value","post","subscribe","res","console","log","Error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Ritik Porwal\\Desktop\\Xcel Practical\\Practical\\src\\app\\registration\\registration.component.ts","C:\\Users\\Ritik Porwal\\Desktop\\Xcel Practical\\Practical\\src\\app\\registration\\registration.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css'],\n})\nexport class RegistrationComponent {\n  public registrationForm!: FormGroup<any>;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {}\n  ngOnInit() {\n    this.registrationForm = this.formBuilder.group({\n      userName: ['', [Validators.required]],\n      mobile: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n  addRegister() {\n    if (this.registrationForm.invalid) {\n      this.markFormGroupTouched(this.registrationForm);\n      return;\n    }\n    if (this.registrationForm.valid) {\n      let obj = {\n        userName: this.registrationForm.value.userName,\n        mobile: this.registrationForm.value.mobile,\n        password: this.registrationForm.value.password,\n      };\n\n      this.http\n        .post('http://localhost:8443/api/register/createUser', obj)\n        .subscribe((res: any) => {\n          console.log('result', res);\n        });\n    }\n  }\n  markFormGroupTouched(registrationForm: FormGroup<any>) {\n    throw new Error('Method not implemented.');\n  }\n}\n","<form [formGroup]=\"registrationForm\" (ngSubmit)=\"addRegister()\">\n  <input type=\"text\" placeholder=\"Email/userName\" formControlName=\"email\" />\n\n  <br /><br />\n  <input\n    type=\"password\"\n    placeholder=\"Password\"\n    formControlName=\"password\"\n  /><br /><br />\n  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}